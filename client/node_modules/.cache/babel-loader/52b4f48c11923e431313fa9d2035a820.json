{"ast":null,"code":"import _slicedToArray from \"D:\\\\My Stuff\\\\My Web Stuff\\\\React\\\\dicso\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"D:\\\\My Stuff\\\\My Web Stuff\\\\React\\\\dicso\\\\client\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"D:\\\\My Stuff\\\\My Web Stuff\\\\React\\\\dicso\\\\client\\\\src\\\\components\\\\Element.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"{\\n  elements{\\n    id\\n    img\\n    text\\n    name\\n    rate\\n    link\\n  }\\n}\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, createRef, useEffect } from \"react\";\nimport { Image, Popup, Rating, Button, Loader } from 'semantic-ui-react';\nimport { gql } from 'apollo-boost';\nimport { graphql } from 'react-apollo';\nimport Frame from './Frame';\nconst getElements = gql(_templateObject());\n\nfunction Element(props) {\n  const reff = createRef();\n\n  const scrollToRef = ref => {\n    window.scrollTo(0, ref.current.offsetTop);\n  };\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        togeled = _useState2[0],\n        setTogeled = _useState2[1];\n\n  useEffect(() => {\n    reff.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'start'\n    });\n  });\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        link = _useState4[0],\n        setLink = _useState4[1];\n\n  let src = '../img/elements/';\n\n  if (props.data.loading) {\n    return React.createElement(Loader, {\n      active: true,\n      inverted: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \"loading ... \");\n  } else return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"elements\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, props.data.elements.map(elem => {\n    return React.createElement(\"div\", {\n      id: \"element\",\n      key: elem.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Popup, {\n      trigger: React.createElement(Image, {\n        src: src + elem.img,\n        size: \"tiny\",\n        className: \"img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }),\n      on: \"click\",\n      hideOnScroll: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Popup.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, elem.name), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, elem.text), React.createElement(Rating, {\n      defaultRating: elem.rate,\n      maxRating: 5,\n      disabled: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"btn_nav\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Button, {\n      circular: true,\n      size: \"mini\",\n      icon: \"linkify\",\n      onClick: () => {\n        setTogeled(true);\n        setLink(elem.link);\n        scrollToRef(contentRef);\n      },\n      color: \"facebook\",\n      color: \"facebook\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }))))));\n  })), React.createElement(\"div\", {\n    ref: reff,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, togeled && [React.createElement(Frame, {\n    link: link,\n    gg: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), React.createElement(\"a\", {\n    className: \"close_btn\",\n    onClick: () => setTogeled(!togeled),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, \"close\")]));\n}\n\nexport default graphql(getElements)(Element); //onClick={()=>navigate(elem.link)} color=\"facebook\"","map":{"version":3,"sources":["D:\\My Stuff\\My Web Stuff\\React\\dicso\\client\\src\\components\\Element.js"],"names":["React","useState","createRef","useEffect","Image","Popup","Rating","Button","Loader","gql","graphql","Frame","getElements","Element","props","reff","scrollToRef","ref","window","scrollTo","current","offsetTop","togeled","setTogeled","scrollIntoView","behavior","block","link","setLink","src","data","loading","elements","map","elem","id","img","name","text","rate","contentRef"],"mappings":"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","sourcesContent":["import React, {useState, createRef, useEffect} from \"react\";\r\nimport {Image, Popup, Rating, Button,Loader} from 'semantic-ui-react';\r\nimport {gql} from 'apollo-boost';\r\nimport { graphql} from 'react-apollo';\r\nimport Frame from './Frame';\r\n\r\n\r\nconst getElements = gql`{\r\n  elements{\r\n    id\r\n    img\r\n    text\r\n    name\r\n    rate\r\n    link\r\n  }\r\n}`;\r\n\r\n\r\n\r\nfunction Element(props){\r\n    const reff= createRef()\r\n    const scrollToRef = (ref) => {window.scrollTo(0, ref.current.offsetTop)};\r\n    const [togeled,setTogeled] = useState(false);\r\n\r\n    useEffect(()=>{\r\n        reff.current.scrollIntoView({\r\n            behavior: 'smooth',\r\n            block: 'start',\r\n          });\r\n  \r\n    },)\r\n    const [link,setLink] = useState('');\r\n    let src='../img/elements/';\r\n    if(props.data.loading){\r\n        return(\r\n            <Loader active inverted>loading ... </Loader>    \r\n        )}\r\n    else\r\n        return(\r\n            <React.Fragment>\r\n                \r\n            <div className=\"elements\">\r\n            \r\n             {props.data.elements.map(elem =>{\r\n                 return(\r\n                    <div id=\"element\"  key={elem.id}>\r\n                    <Popup\r\n                        trigger={<Image  src={src +elem.img} size=\"tiny\" className=\"img\"></Image>}\r\n                        on='click'\r\n                        hideOnScroll>\r\n                            \r\n                        <Popup.Content>\r\n                            <span>\r\n                                <h3>{elem.name}</h3>\r\n                                <p>{elem.text}</p>\r\n                                <Rating defaultRating={elem.rate} maxRating={5} disabled />\r\n                                <div className=\"btn_nav\"><Button circular size=\"mini\" icon=\"linkify\" onClick={()=>{setTogeled(true);setLink(elem.link);scrollToRef(contentRef)}} color=\"facebook\" color=\"facebook\"/></div>\r\n                            </span>\r\n                        </Popup.Content>\r\n                    </Popup>\r\n                    </div>\r\n             \r\n             )})} \r\n            </div>\r\n             <div ref={reff}>\r\n                {togeled && [<Frame link={link} gg={true}/>,<a className=\"close_btn\"onClick={()=>setTogeled(!togeled)}>close</a>]}\r\n            </div>\r\n            </React.Fragment>\r\n    )\r\n}\r\nexport default graphql(getElements)(Element);\r\n\r\n//onClick={()=>navigate(elem.link)} color=\"facebook\""]},"metadata":{},"sourceType":"module"}